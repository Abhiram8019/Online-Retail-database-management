-- Identify the Best-Selling Products -- 
SELECT 
    p.product_name, SUM(o.quantity) AS total_quantity
FROM
    products p
        JOIN
    orderitems o ON p.product_id = o.product_id
GROUP BY p.product_name
ORDER BY total_quantity DESC
LIMIT 5;

 -- Calculate Revenue Generated by Each Product -- 
SELECT 
    p.product_name, SUM(o.quantity * o.price) AS total_revenue
FROM
    products p
        JOIN
    orderitems o ON p.product_id = o.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC;

--  Determine Revenue by Category -- 
SELECT 
    c.category_name,
    SUM(oi.quantity * oi.price) AS total_revenue
FROM
    orderitems oi
        JOIN
    products p ON p.product_id = oi.product_id
        JOIN
    categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_revenue DESC
;

-- Get Products Priced Above Average -- 
SELECT 
    product_name, price
FROM
    products
WHERE
    price > (SELECT 
            AVG(price)
        FROM
            products);

--  Find Customers Who Spent More Than the Average Order Amount -- 
SELECT 
    c.first_name,
    c.last_name,
    SUM(o.total_amount) AS total_spent
FROM
    customers c
        JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING total_spent > (SELECT 
        AVG(total_amount)
    FROM
        orders);

-- Create a View for Customer Orders -- 
CREATE VIEW customers_orders AS
    SELECT 
        c.customer_id,
        c.first_name,
        c.last_name,
        o.order_id,
        o.total_amount
    FROM
        customers c
            JOIN
        orders o ON c.customer_id = o.customer_id;

-- Query the customers_order View --
SELECT 
    *
FROM
    customers_orders
WHERE
    total_amount > 500;

-- Create a View for Product Stock Levels --  
CREATE VIEW product_stock_levels AS
    SELECT 
        product_id, product_name, stock
    FROM
        products
    WHERE
        stock > 10;
 
 -- Stored Procedure to Get Orders for a Specific Customer -- 
 
DELIMITER $$

CREATE PROCEDURE GetCustomerOrders(IN customerID INT)
BEGIN
    SELECT o.order_id, o.order_date, o.total_amount
    FROM orders o
    WHERE o.customer_id = customerID;
END$$

DELIMITER ;

 -- Stored Procedure to Update Product Stock -- 
DELIMITER $$ 

CREATE PROCEDURE UpdateProductStock(IN productid INT ,IN quantity_sold INT)
BEGIN 
	UPDATE products 
    SET stock = stock - quantity_sold  
    where product_id = productid ; 
 END$$ 
 
 DELIMITER ; 
 
 -- Stored Procedure to Calculate Total Revenue for a Given Date Range --  
 DELIMITER $$ 
 CREATE PROCEDURE Totalrevenue (IN start_date INT, IN end_date INT)
 BEGIN 
		SELECT 
        sum(o.total_amount) AS total_revenue 
		FROM 
        orders o 
        WHERE 
        order_date BETWEEN start_date AND end_date ; 
END$$ 

DELIMITER ; 

-- Stored Procedure to Add a New Customer -- 
 DELIMITER $$  
 CREATE PROCEDURE Newcustomer (
IN firstname varchar(50),
IN lastname varchar(50),
IN email varchar(100),
IN phone varchar(20),
IN address varchar(255),
IN city varchar(25),
IN state varchar(25),
IN zipcode varchar(50),
IN country varchar(20)
) 
BEGIN 
	 INSERT INTO  customers (first_name,last_name,email,phone,address,city, state, zipcode, country) 
     VALUES (firstname,lastname,email,phone,address, city, state, zipcode, country);
END$$ 
DELIMITER ; 


-- Stored Procedure to Record a New Order -- 
DELIMITER $$ 
create procedure placeorder (
	IN customerID INT ,
    IN total_amount DECIMAL(10,2)
) 
begin 
	INSERT INTO orders (customer_id,order_date,total_amount)
    VALUES (customerID,NOW(),total_amount) ;
END$$ 
DELIMITER ;


-- Retrieve the Highest Revenue-Generating Products by Category -- 

SELECT 
    p.category_id,
    p.product_name,
    SUM(oi.quantity * oi.price) AS total_revenue
FROM
    products p
        JOIN
    orderItems oi ON p.product_id = oi.product_id
GROUP BY p.product_id , p.category_id
HAVING total_revenue = (SELECT 
        MAX(total_revenue)
    FROM
        (SELECT 
            SUM(oi2.quantity * oi2.price) AS total_revenue
        FROM
            orderItems oi2
        JOIN products p2 ON oi2.product_id = p2.product_id
        WHERE
            p2.category_id = p.category_id
        GROUP BY oi2.product_id) AS subquery);
        
-- Ranking Products by Revenue -- 

select 
p.product_id ,
p.product_name,
sum(oi.price * oi.quantity) as total_revenue ,
rank() over (order by sum(oi.price * oi.quantity) DESC) AS revenue_rank
from  
products p 
join orderitems oi on p.product_id = oi.product_id 
group by 
p.product_id;
